@layout MainLayout
@inject IJSRuntime js
@implements IAsyncDisposable

@if (_newVersionAvailable)
{     
    <div class="update-button">
        <MudPaper Width="400px" Class="pa-2 mud-theme-primary">
            <button type="button" @onclick="UpdateApp">A new version is available. Click here to reload</button> <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Update"/>
        </MudPaper>          
    </div>    
}

@code {

    private bool _newVersionAvailable = false;

    [JSInvokable("Updater.NotifyUpdateAvailable")]
    public void OnUpdateAvailable(bool isAvailable)
    {
        _newVersionAvailable = isAvailable;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        await js.InvokeVoidAsync("Updater.Initialize", DotNetObjectReference.Create(this));
    }

    private async Task UpdateApp() => 
        await js.InvokeVoidAsync("restartApp");

    public async ValueTask DisposeAsync() {
        await js.InvokeVoidAsync("Updater.Dispose");
    }        
}

